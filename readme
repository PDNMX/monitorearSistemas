# üåü API Service Data Collector
## üìã Descripci√≥n

Este proyecto consiste en tres scripts de servicio (`APIService_s1.js`, `APIService_s2.js`, y `APIService_s3.js`) dise√±ados para recolectar datos de diferentes endpoints. Los scripts pueden ejecutarse individualmente o en conjunto a trav√©s del archivo `index.js`.

## üöÄ Caracter√≠sticas

- ‚ú® Recolecci√≥n automatizada de datos de m√∫ltiples endpoints
- üìä Generaci√≥n de archivos CSV con resultados
- üîÑ Manejo de errores y registro detallado
- üìù Logging completo de operaciones
- ‚ö° Ejecuci√≥n individual o conjunta de servicios

## üõ†Ô∏è Configuraci√≥n

### Requisitos Previos

```bash
node >= 14.x
npm >= 6.x
```

### Configuraci√≥n del Archivo .env

Crear un archivo `.env` en la ra√≠z del proyecto con las siguientes variables pero sustituyendo las rutas de los archivos de entrada:

```env
# Variables de entrada para el s1
url_proveedores_s1 = "https://api.plataformadigitalnacional.org/s1/v1/providers"
url_busqueda_s1 = "https://api.plataformadigitalnacional.org/s1/v1/search"

# Variables de entrada para el s2
url_busqueda_s2 = "https://api.plataformadigitalnacional.org/s2/api/v1/summary"

# Variables de entrada para el s3
url_proveedores_s3 = "https://api.plataformadigitalnacional.org/s3-wrapper/api/v1/providers"
url_busqueda_s3 = "https://api.plataformadigitalnacional.org/s3-wrapper/api/v1/"

# variables de salida
salida_s1 = "./resultados_s1"
salida_s2 = "./resultados_s2"
salida_s3 = "./resultados_s3"
```

### Estructura de Directorios

```
proyecto/
‚îú‚îÄ‚îÄ .env
‚îú‚îÄ‚îÄ index.js
‚îú‚îÄ‚îÄ APIService_s1.js
‚îú‚îÄ‚îÄ APIService_s2.js
‚îú‚îÄ‚îÄ APIService_s3.js
‚îú‚îÄ‚îÄ EndPointsAPIS/
‚îÇ   ‚îú‚îÄ‚îÄ EndPoints_s1/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ endpointsS1.json
‚îÇ   ‚îú‚îÄ‚îÄ EndPoints_s2/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ endpointsS2.json
‚îÇ   ‚îî‚îÄ‚îÄ EndPoints_s3/
‚îÇ       ‚îî‚îÄ‚îÄ endpointsS3.json
‚îî‚îÄ‚îÄ resultados/
    ‚îú‚îÄ‚îÄ resultados_s1/
    ‚îú‚îÄ‚îÄ resultados_s2/
    ‚îî‚îÄ‚îÄ resultados_s3/
```

## üíª Uso

### Ejecuci√≥n Individual

Para ejecutar cada servicio individualmente:

```bash
node APIService_s1.js
node APIService_s2.js
node APIService_s3.js
```

### Ejecuci√≥n Conjunta

Para ejecutar todos los servicios:

```bash
node index.js
```

## üìÅ Archivos de Salida

Cada servicio genera los siguientes archivos en su respectivo directorio de salida:

```
resultados_sX/
‚îú‚îÄ‚îÄ resultados_sX_[fecha].csv    # Resultados diarios
‚îú‚îÄ‚îÄ total_registros.csv          # Totales acumulados
‚îî‚îÄ‚îÄ errores_sX_[fecha].csv       # Registro de errores
```

## üìä Formato de Archivos CSV

### resultados_sX_[fecha].csv
```csv
Fecha,Proveedor,ID,Total_Registros
```

### total_registros.csv
```csv
Fecha,Total_Registros
```

### errores_sX_[fecha].csv
```csv
Fecha,Proveedor,ID,Mensaje_Error,Codigo_HTTP,Detalles
```

## ‚ö†Ô∏è Manejo de Errores

- Los errores detallados se registran en archivos separados
- El archivo principal marca registros con error como "No disponible"
- Se mantiene un log completo de todas las operaciones

## üîç Logging

El sistema utiliza `log4js` para mantener un registro detallado de:
- ‚úÖ Operaciones exitosas
- ‚ùå Errores y excepciones
- ‚è±Ô∏è Tiempos de ejecuci√≥n
- üìù Detalles de respuestas

# Comparador de Registros por Periodo comparador.py

Este script permite analizar y comparar registros de datos entre dos fechas espec√≠ficas, calculando las diferencias y porcentajes de cambio para cada Ente p√∫blico.

## Caracter√≠sticas

- Compara registros entre fechas espec√≠ficas definidas por el usuario
- Identifica autom√°ticamente el primer y √∫ltimo registro con valores v√°lidos para cada Ente p√∫blico
- Calcula diferencias y porcentajes de cambio en los registros
- Maneja correctamente valores de error y datos faltantes
- Normaliza nombres de entidades para gestionar diferentes formatos y variaciones
- Genera un informe detallado con observaciones claras y precisas

## Requisitos

- Python 3.6 o superior
- No requiere bibliotecas externas (usa solo m√≥dulos de la biblioteca est√°ndar)

## Uso del script

Para ejecutar el script de comparaci√≥n de registros, utilice el siguiente comando en su terminal:

```bash
python comparador.py <fecha_inicio> <fecha_fin> <archivo_origen> <archivo_destino>
```

Donde:
- `comparador.py`: Es el nombre del archivo del script.
- `<fecha_inicio>`: Fecha de inicio del periodo en formato YYYY-MM-DD (por ejemplo: 2025-03-16).
- `<fecha_fin>`: Fecha de fin del periodo en formato YYYY-MM-DD (por ejemplo: 2025-03-20).
- `<archivo_origen>`: Ruta al archivo CSV que contiene los datos hist√≥ricos que desea analizar.
- `<archivo_destino>`: Ruta donde se guardar√° el archivo CSV con los resultados del an√°lisis.

Ejemplo:
```bash
python comparador.py 2025-03-16 2025-03-20 resultados_s3/s3_faltas_graves_personas_fisicas.csv analisis/resultados_comparacion_s3_fisicas.csv
```

Este comando analizar√° los datos hist√≥ricos del archivo `s3_faltas_graves_personas_fisicas.csv` ubicado en la carpeta `resultados_s3`, comparando el periodo entre el 16 y el 20 de marzo de 2025, y guardar√° los resultados del an√°lisis en el archivo `resultados_comparacion_s3_fisicas.csv` dentro de la carpeta `analisis`.

## Formato del archivo de entrada

El script espera un archivo CSV con el siguiente formato:

```
FECHA_EJECUCION,HORA_EJECUCION,ENTE,TOTAL_REGISTROS,ESTATUS
2025-03-16,12:57:14,Aguascalientes,1584,Disponible
2025-03-16,12:57:14,Baja California Sur,80,Disponible
...
```

Las columnas necesarias son:
- `FECHA_EJECUCION`: Fecha en formato YYYY-MM-DD
- `HORA_EJECUCION`: Hora en formato HH:MM:SS
- `ENTE` o `ENTE_PUBLICO`: Nombre de la entidad
- `TOTAL_REGISTROS`: N√∫mero de registros (puede contener "ERROR")
- `ESTATUS`: Estado del registro (p.ej. "Disponible", "No disponible/Error reportado por la API")

## Formato del archivo de salida

El script generar√° un archivo CSV con las siguientes columnas:

- `ENTE`: Nombre de la entidad
- `FECHA INICIAL`: Fecha y hora del primer registro utilizado para la comparaci√≥n
- `FECHA FINAL`: Fecha y hora del √∫ltimo registro utilizado para la comparaci√≥n
- `REGISTROS INICIALES`: N√∫mero de registros en la fecha inicial
- `REGISTROS FINALES`: N√∫mero de registros en la fecha final
- `DIFERENCIA DE REGISTROS EN EL PERIODO`: Cambio en el n√∫mero de registros
- `PORCENTAJE DE CAMBIO`: Porcentaje de cambio respecto a los registros iniciales
- `OBSERVACIONES`: Notas explicativas sobre los datos analizados

## Funcionamiento

El script realiza las siguientes operaciones:

1. Lee los registros del archivo de entrada dentro del periodo especificado
2. Agrupa los registros por entidad
3. Para cada entidad:
   - Encuentra el primer registro con valor num√©rico v√°lido
   - Encuentra el √∫ltimo registro con valor num√©rico v√°lido
   - Calcula la diferencia y el porcentaje de cambio entre ambos
   - A√±ade observaciones relevantes sobre los datos
4. Genera un archivo CSV con los resultados

## Manejo de errores y casos especiales

- Si un valor `TOTAL_REGISTROS` es "ERROR", el script lo ignora y busca otro registro con valor num√©rico v√°lido
- Si una entidad solo tiene valores de error, el script lo indica en las observaciones
- Si solo existe un registro v√°lido para una entidad en todo el periodo, se utiliza como valor inicial y final
- Los nombres de entidades se normalizan para manejar variaciones (may√∫sculas/min√∫sculas, espacios, guiones)
- Las entidades que no tienen registros dentro del periodo no aparecen en el resultado

## Contribuciones

Las contribuciones son bienvenidas. Por favor, abra un issue para discutir cambios importantes antes de enviar un pull request.

## üë• Contribuci√≥n

Las contribuciones son bienvenidas. Por favor, aseg√∫rese de:
1. Hacer fork del repositorio
2. Crear una rama para su feature
3. Hacer commit de sus cambios
4. Hacer push a la rama
5. Crear un Pull Request

## üìú Licencia

Este proyecto est√° bajo la licencia MIT. Ver el archivo `LICENSE` para m√°s detalles.

---

Desarrollado con ‚ù§Ô∏è por H√©ctor Franco
